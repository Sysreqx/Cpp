//24. Стандартный класс string в языке C++

Класс string предназначен для работы со строками типа char*, которые представляют собой строку с завершающим нулем.Класс string был введенн как альтернативный вариант для работы со строками типа char* .Строки, которые завершаются символом ‘\0’ еще называются C - строками.

Чтобы использовать возможности класса string в MS Visual Studio(C++), нужно подключить библиотеку <string> и пространство имен std.

Объявление переменной типа string осуществляется точно так же как и обычной переменной.Возможный вариант объявления с одновременной инициализацией.
string s1;

Создание нового типа string было обусловлено недостатками работы с строками символов, который демонстрировал тип char* .В сравнении с типом char* тип string имеет следующие основные преимущества :

возможность обработки строк стандартными операторами C++ (=, +, = =, <> и т.п.).Как известно, при использовании типа char* даже наиболее простые операции со строками выглядели сложно и требовали написания чрезмерного программного кода;
обеспечение лучшей надежности(безопасности) программного кода.Например, при копировании строк, тип string обеспечивает соответствующие действия, которые могут возникнуть в случае, если строка - источник имеет больший размер чем строка - приемник;
обеспечение строки, как самостоятельного типа данных.Объявление типа string как строки есть единым для всех переменных в программе, которая обеспечивает непротиворечивость данных.
Основным недостатком типа string в сравнении с типом char*, есть замедленная скорость обработки данных.Это связано с тем, что тип string – это, фактически, контейнерный класс.А работа с классом требует дополнительной реализации программного кода, который, в свою очередь занимает лишнее время.

Класс string есть удобен тем, что позволяет удобно манипулировать строками, используя стандартные(перегруженные) операторы.

С объектами класса string можно использовать нижеследующие операторы

= – присваивание
+ – конкатенация(объединение строк)
+= – присваивание с конкатенацией
== – равенство
!= – неравенство
< – меньше
	<= – меньше или равно
> – больше
>= – больше или равно
[] – индексация